"""
Gemini AI Service for Code Whisperer
Handles AI queries using Google Gemini API
"""

import os
import time
import uuid
from typing import List, Dict, Any
from dotenv import load_dotenv
from google import genai

# Load environment variables
load_dotenv()


class GeminiService:
    """Service for interacting with Google Gemini API"""
    
    def __init__(self):
        """Initialize the Gemini service with API key"""
        self.api_key = os.getenv('GOOGLE_API_KEY')
        if not self.api_key:
            raise ValueError("GOOGLE_API_KEY not found in environment variables")
        
        # Initialize Gemini client
        self.client = genai.Client(api_key=self.api_key)
        self.model = "gemini-1.5-flash"  # Fast model for development
        
    def analyze_code(self, query_type: str, query_text: str, code_context: Dict[str, Any]) -> Dict[str, Any]:
        """
        Analyze code using Gemini AI
        
        Args:
            query_type: Type of analysis (explain, optimize, debug, etc.)
            query_text: User's specific question
            code_context: Context about the code (language, file, content)
            
        Returns:
            Dict containing analysis results
        """
        start_time = time.time()
        
        # Build context-aware prompt
        prompt = self._build_prompt(query_type, query_text, code_context)
        
        try:
            # Query Gemini API
            response = self.client.models.generate_content(
                model=self.model,
                contents=prompt
            )
            
            # Process response
            ai_response = response.text.strip()
            
            # Parse response into structured format
            analysis = self._parse_response(ai_response, query_type)
            
            # Add metadata
            analysis["processing_time_ms"] = int((time.time() - start_time) * 1000)
            analysis["query_id"] = str(uuid.uuid4())
            analysis["model_used"] = self.model
            
            return analysis
            
        except Exception as e:
            # Handle API errors gracefully
            return {
                "error": True,
                "message": f"Gemini API error: {str(e)}",
                "query_id": str(uuid.uuid4()),
                "processing_time_ms": int((time.time() - start_time) * 1000)
            }
    
    def _build_prompt(self, query_type: str, query_text: str, code_context: Dict[str, Any]) -> str:
        """Build a context-aware prompt for Gemini"""
        
        language = code_context.get('language', 'unknown')
        file_path = code_context.get('file_path', 'unknown')
        selected_code = code_context.get('selected_code', '')
        
        prompt = f"""
As a senior software engineer, please analyze this {language} code:

File: {file_path}
Code:
```{language}
{selected_code}
```

Question: {query_text}
Task: {query_type}

Please provide a helpful response with practical insights.
"""
        return prompt
    
    def _parse_response(self, ai_response: str, query_type: str) -> Dict[str, Any]:
        """Parse Gemini response into structured format"""
        
        return {
            "explanation": ai_response,
            "suggestions": [{"title": "AI Suggestion", "description": "Generated by Gemini", "confidence": 0.8}],
            "code_examples": [],
            "confidence": 0.85,
            "query_type": query_type
        }
    
    def health_check(self) -> Dict[str, Any]:
        """Check if Gemini service is healthy"""
        try:
            response = self.client.models.generate_content(
                model=self.model,
                contents="Hello! Please respond with 'Service is healthy' if you can read this."
            )
            
            if "healthy" in response.text.lower():
                return {"status": "healthy", "service": "gemini_api"}
            else:
                return {"status": "degraded", "service": "gemini_api"}
                
        except Exception as e:
            return {"status": "unhealthy", "service": "gemini_api", "error": str(e)} 